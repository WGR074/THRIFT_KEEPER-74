from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from decimal import Decimal, InvalidOperation

from states_hand.states_expense import ExpenseStates
from database.db import Database
from keyboards.main_menu import get_main_menu_keyboard
from keyboards.categories import get_categories_keyboard
from keyboards.confirm import get_confirmation_keyboard

router = Router()
db = Database()

@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥")
async def add_expense(message: Message, state: FSMContext):
    await state.set_state(ExpenseStates.waiting_for_category)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞:",
        reply_markup=get_categories_keyboard()
    )


@router.message(
    ExpenseStates.waiting_for_category,
    F.text.in_([
        "üçî –ï–¥–∞", "üöï –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
        "üè† –ñ–∏–ª—å—ë", "üéÆ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è",
        "üõí –ü–æ–∫—É–ø–∫–∏"
    ])
)
async def handle_predefined_category(message: Message, state: FSMContext):
    await state.update_data(category=message.text)
    await state.set_state(ExpenseStates.waiting_for_amount)
    await message.answer(
        f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞ –¥–ª—è {message.text}:",
        reply_markup=ReplyKeyboardRemove()
    )


@router.message(ExpenseStates.waiting_for_category, F.text == "‚úèÔ∏è –î—Ä—É–≥–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è")
async def request_custom_category(message: Message, state: FSMContext):
    await state.set_state(ExpenseStates.waiting_for_custom_category)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–º–∞–∫—Å. 30 —Å–∏–º–≤–æ–ª–æ–≤):",
        reply_markup=ReplyKeyboardRemove()
    )


@router.message(ExpenseStates.waiting_for_custom_category, F.text.len() <= 30)
async def handle_custom_category(message: Message, state: FSMContext):
    custom_category = message.text.strip()
    if not custom_category:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return

    await state.update_data(category=custom_category)
    await state.set_state(ExpenseStates.waiting_for_amount)
    await message.answer(
        f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞ –¥–ª—è '{custom_category}':"
    )


@router.message(ExpenseStates.waiting_for_amount)
async def process_amount_input(message: Message, state: FSMContext):
    try:
        amount = Decimal(message.text.replace(',', '.'))
        if amount <= 0:
            raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")

        await state.update_data(amount=str(amount))
        await state.set_state(ExpenseStates.waiting_for_description)
        await message.answer(
            "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫ —Ä–∞—Å—Ö–æ–¥—É? (–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')",
            reply_markup=get_confirmation_keyboard()
        )

    except (ValueError, InvalidOperation):
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 150 –∏–ª–∏ 45.50)\n"
            "–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è."
        )


@router.message(ExpenseStates.waiting_for_description)
async def handle_description(message: Message, state: FSMContext):
    if len(message.text) > 200:
        await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å. 200 —Å–∏–º–≤–æ–ª–æ–≤). –°–æ–∫—Ä–∞—Ç–∏—Ç–µ:")
        return

    await state.update_data(description=message.text)
    await save_transaction(message, state)


async def save_transaction(message: Message, state: FSMContext):
    data = await state.get_data()

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if 'amount' not in data or 'category' not in data:
            await message.answer("‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—É–º–º–∞ ‚Äî –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ
        amount_str = data['amount']
        try:
            amount = Decimal(amount_str)
        except InvalidOperation:
            await message.answer("‚ùå –°—É–º–º–∞ —É–∫–∞–∑–∞–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
            return

        if amount <= 0:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.")
            return

        user_id = message.from_user.id

        success = db.add_transaction(
            user_id=user_id,
            amount=float(amount),
            category=data['category'],
            transaction_type='expense',
            description=data.get('description')
        )

        if success:
            balance = db.get_balance(user_id)
            await message.answer(
                f"‚úÖ –†–∞—Å—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω:\n"
                f"‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data['category']}\n"
                f"‚Ä¢ –°—É–º–º–∞: {amount:.2f}\n"
                f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {data.get('description', '–Ω–µ—Ç')}\n\n"
                f"üí≥ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance:.2f}",
                reply_markup=get_main_menu_keyboard()
            )
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞—Å—Ö–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    finally:
        await state.clear()


@router.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def back_to_menu(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_menu_keyboard()
    )